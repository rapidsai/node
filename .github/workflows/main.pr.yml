name: Build pull request

on:
  push:
    branches:
      - 'pull-request/**'

jobs:
  build-pull-request:
    name: Build pull request
    # runs-on: ubuntu-20.04
    runs-on: [self-hosted, linux, amd64, cpu4]
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      fail-fast: true
      matrix:
        CUDA: [11.6.2]
        LINUX: ["ubuntu20.04"]
    env:
      NODE: "18.2.0"
      RAPIDS: "22.06.00"
    steps:
      - name: Install utilities
        env:
          is_gha_runner: "${{ runner.name == 'ubuntu-20.04' }}"
        if: env.is_gha_runner == 'false'
        shell: bash
        run: |
          sudo apt update
          sudo apt install --no-install-recommends git-lfs

      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          path: node
          fetch-depth: 0

      - name: Checkout LFS
        shell: bash
        run: git lfs checkout
        working-directory: node

      - name: Get last successful main commit sha
        uses: nrwl/last-successful-commit-action@v1
        id: last_main_commit
        with:
          branch: main
          workflow_id: "merge.pr.yml"
          github_token: "${{ github.token }}"

      - name: Check if source files changed
        id: src_changed
        uses: tj-actions/changed-files@v23.1
        with:
          path: node
          base_sha: ${{ steps.last_main_commit.outputs.commit_hash }}
          files: |
            yarn\.lock
            lerna\.json
            package\.json
            modules/**/package\.json
            modules/**/CMakeLists\.txt
            modules/**/*\.(c|h|ts|js|cu|cuh|cpp|hpp|json|cmake|tsconfig)

      - name: Check if GitHub Actions or devel main Dockerfile changed
        id: dev_changed
        uses: tj-actions/changed-files@v23.1
        with:
          path: node
          base_sha: ${{ steps.last_main_commit.outputs.commit_hash }}
          files: |
            dev/dockerfiles/devel/main\.Dockerfile
            \.github/workflows/main\.pr\.yml
            \.github/workflows/merge\.pr\.yml
            \.github/actions/build-and-publish-image/action\.yml

      - name: Update runner env
        env:
          CUDA: "${{ matrix.CUDA }}"
          LINUX: "${{ matrix.LINUX }}"
          is_gha_runner: "${{ runner.name == 'ubuntu-20.04' }}"
          dev_changed: "${{ steps.dev_changed.outputs.any_changed == 'true' }}"
          src_changed: "${{ steps.src_changed.outputs.any_changed == 'true' || steps.src_changed.outputs.any_deleted == 'true' }}"
        shell: bash
        run: |
          echo "CUDA=${CUDA}" >> $GITHUB_ENV;
          echo "LINUX=${LINUX}" >> $GITHUB_ENV;
          echo "dev_changed=${dev_changed}" >> $GITHUB_ENV;
          echo "src_changed=${src_changed}" >> $GITHUB_ENV;
          echo "is_gha_runner=${is_gha_runner}" >> $GITHUB_ENV;

          [[ ${dev_changed} == 0 && ${src_changed} == 0 ]] && REGISTRY="ghcr.io" || REGISTRY="localhost:5000";
          echo "MAIN_IMG=${REGISTRY}/${{ github.repository }}:${RAPIDS}-devel-node${NODE}-cuda${CUDA}-${LINUX}-main" >> $GITHUB_ENV;

          echo "RUN_ARGS<<EOF" >> $GITHUB_ENV;
          echo "\
          -u $(id -u):$(id -g) \
          -v $(pwd)/.yarn:/.yarn:rw \
          -v $(pwd)/.cache:/.cache:rw \
          -v $(pwd)/node:/opt/rapids/node:rw \
          --env-file ${{ runner.temp }}/.env \
          " >> $GITHUB_ENV;
          echo "EOF" >> $GITHUB_ENV;

      - name: Cache C++ dependencies
        if: env.dev_changed == 'true' || env.src_changed == 'true'
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ env.RAPIDS }}-node${{ env.NODE }}-cuda${{ matrix.CUDA }}-${{ matrix.LINUX }}-cache-${{ hashFiles('**/modules/**/CMakeLists.txt', '**/modules/**/*.cmake') }}
          path: |
            node/.cache/binary
            node/.cache/source

      - name: Cache node_modules
        if: env.dev_changed == 'true' || env.src_changed == 'true'
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ env.RAPIDS }}-node${{ env.NODE }}-cuda${{ matrix.CUDA }}-${{ matrix.LINUX }}-node_modules-${{ hashFiles('**/yarn.lock', '**/package.json') }}
          path: |
            .yarn
            .cache
            node/node_modules

      - name: Free up disk space
        if: env.is_gha_runner == 'true' && (env.dev_changed == 'true' || env.src_changed == 'true')
        shell: bash
        run: |
          df -h
          docker images
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          sudo rm -rf /opt/ghc "$CONDA" \
            /usr/share/swift \
            /usr/share/dotnet \
            /usr/local/lib/android \
            /home/linuxbrew/.linuxbrew \
            /opt/hostedtoolcache/CodeQL
          docker rmi $(docker image ls -aq) || true
          df -h
          docker images

      - name: Build devel main image
        if: env.dev_changed == 'true' && env.src_changed == 'true'
        uses: ./node/.github/actions/build-and-publish-image
        with:
          context: node
          registry-url: ghcr.io
          registry-username: ${{ github.repository_owner }}
          registry-password: ${{ github.token }}
          pull: true
          push: true
          temp: ${{ runner.temp }}
          buildx-driver-opts: network=host
          clean-first: ${{ env.is_gha_runner == 'true' }}
          file: node/dev/dockerfiles/devel/main.Dockerfile
          tags: |
            ${{ env.MAIN_IMG }}
          build-args: |
            "NODE_VERSION=${{ env.NODE }}"
            "LINUX_VERSION=${{ env.LINUX }}"
            "AMD64_BASE=nvidia/cuda:${{ matrix.CUDA }}-devel-${{ matrix.LINUX }}"
            "ARM64_BASE=nvidia/cuda:${{ matrix.CUDA }}-devel-${{ matrix.LINUX }}"

      - name: Make container .env
        if: env.src_changed == 'true'
        shell: bash
        run: |
          cat << EOF > "${{ runner.temp }}/.env"
          CUDAARCHS=ALL
          PARALLEL_LEVEL=1
          RAPIDS_VERSION=${RAPIDS}
          SCCACHE_REGION=us-west-2
          SCCACHE_IDLE_TIMEOUT=32768
          SCCACHE_BUCKET=node-rapids-sccache
          SCCACHE_SERVER_PORT=$((4220 + $RANDOM % 5000))
          EOF

      - name: yarn install
        if: env.src_changed == 'true'
        shell: bash
        run: |
          docker run --rm -t ${RUN_ARGS} ${MAIN_IMG} bash -c 'set -ex; yarn --pure-lockfile --prefer-offline';

      - name: Lint source files
        if: env.src_changed == 'true'
        shell: bash
        run: |
          docker run --rm -t ${RUN_ARGS} ${MAIN_IMG} bash -c 'set -ex; yarn lint:ci';

      - name: Build packages
        if: env.src_changed == 'true'
        shell: bash
        run: |
          docker run --rm -t ${RUN_ARGS} \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e RAPIDSAI_GITHUB_ACCESS_TOKEN="${{ secrets.RAPIDSAI_GITHUB_ACCESS_TOKEN }}" \
            ${MAIN_IMG} bash -c 'set -ex; yarn build';
