name: Build pull request

on:
  push:
    branches:
      - 'pull-request/**'

jobs:
  build-pull-request:
    name: Build pull request
    runs-on: ubuntu-20.04
    # runs-on: [self-hosted, linux, amd64, cpu4]
    strategy:
      fail-fast: true
      matrix:
        CUDA: ["11.6.2"]
        LINUX: ["ubuntu20.04"]
    env:
      UCX: "1.12.1"
      NODE: "16.15.1"
      RAPIDS: "22.06.00"
      REGISTRY: "ghcr.io"
    steps:
      - name: Dump runner context
        shell: bash
        run: |
          echo "${{ toJSON(runner) }}"
          echo "is_gha_runner=${{ !contains(runner.name, 'runners-') }}" >> $GITHUB_ENV;

      - name: Install utilities
        if: env.is_gha_runner != 'true'
        shell: bash
        run: |
          sudo apt update
          sudo apt install --no-install-recommends git-lfs

      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
          path: node
          fetch-depth: 0

      - name: Checkout LFS
        shell: bash
        run: git lfs checkout
        working-directory: node

      - name: Get last successful main commit sha
        uses: nrwl/last-successful-commit-action@v1
        id: last_main_commit
        with:
          branch: main
          workflow_id: "merge.pr.yml"
          github_token: "${{ github.token }}"

      - name: Check if source files changed
        id: src_changed
        uses: tj-actions/changed-files@v23.1
        with:
          path: node
          base_sha: ${{ steps.last_main_commit.outputs.commit_hash }}
          files: |
            yarn\.lock
            lerna\.json
            package\.json
            modules/**/package\.json
            modules/**/CMakeLists\.txt
            modules/**/*\.(c|h|ts|js|cu|cuh|cpp|hpp|json|cmake|tsconfig)

      - name: Check if GitHub Actions or devel main Dockerfile changed
        id: dev_changed
        uses: tj-actions/changed-files@v23.1
        with:
          path: node
          base_sha: ${{ steps.last_main_commit.outputs.commit_hash }}
          files: |
            dev/dockerfiles/devel/main\.Dockerfile
            \.github/workflows/main\.pr\.yml
            \.github/workflows/merge\.pr\.yml
            \.github/actions/build-and-publish-image/action\.yml

      - name: Update runner env
        env:
          CUDA: "${{ matrix.CUDA }}"
          LINUX: "${{ matrix.LINUX }}"
          dev_changed: "${{ steps.dev_changed.outputs.any_changed == 'true' }}"
          src_changed: "${{ steps.src_changed.outputs.any_changed == 'true' || steps.src_changed.outputs.any_deleted == 'true' }}"
        shell: bash
        run: |
          echo "CUDA=${CUDA}" >> $GITHUB_ENV;
          echo "LINUX=${LINUX}" >> $GITHUB_ENV;
          echo "dev_changed=${dev_changed}" >> $GITHUB_ENV;
          echo "src_changed=${src_changed}" >> $GITHUB_ENV;
          echo "MAIN_IMG=${REGISTRY}/${{ github.repository }}:${RAPIDS}-devel-node${NODE}-cuda${CUDA}-${LINUX}-main" >> $GITHUB_ENV;
          echo "RUN_ARGS<<EOF" >> $GITHUB_ENV;
          echo "\
          -u $(id -u):$(id -g) \
          -v $(pwd)/.yarn:/.yarn:rw \
          -v $(pwd)/.cache:/.cache:rw \
          -v $(pwd)/node:/opt/rapids/node:rw \
          --env-file ${{ runner.temp }}/.env \
          " >> $GITHUB_ENV;
          echo "EOF" >> $GITHUB_ENV;

      - name: Free up disk space
        if: env.is_gha_runner == 'true' && (env.dev_changed == 'true' || env.src_changed == 'true')
        uses: ./node/.github/actions/free-disk-space
        with:
          tool_cache: ${{ runner.tool_cache }}

      - name: Cache C++ dependencies
        if: env.dev_changed == 'true' || env.src_changed == 'true'
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ env.RAPIDS }}-node${{ env.NODE }}-cuda${{ matrix.CUDA }}-${{ matrix.LINUX }}-cache-${{ hashFiles('**/modules/**/CMakeLists.txt', '**/modules/**/*.cmake') }}
          path: |
            node/.cache/binary
            node/.cache/source

      - name: Cache node_modules
        if: env.dev_changed == 'true' || env.src_changed == 'true'
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ env.RAPIDS }}-node${{ env.NODE }}-cuda${{ matrix.CUDA }}-${{ matrix.LINUX }}-node_modules-${{ hashFiles('**/yarn.lock', '**/package.json') }}
          path: |
            .yarn
            .cache
            node/node_modules

      - name: Set up ssh-agent
        if: env.dev_changed == 'true' || env.src_changed == 'true'
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: |
            ${{ secrets.CUMLPRIMS_SSH_PRIVATE_DEPLOY_KEY }}
            ${{ secrets.CUGRAPH_OPS_SSH_PRIVATE_DEPLOY_KEY }}

      - name: Make container .env
        if: env.dev_changed == 'true' || env.src_changed == 'true'
        shell: bash
        run: |
          threads=1
          # threads=$((${PARALLEL_LEVEL:-1} / 2))
          cat << EOF > "${{ runner.temp }}/.env"
          CUDAARCHS=ALL
          PARALLEL_LEVEL=${threads}
          NVCC_APPEND_FLAGS=--threads=${threads}
          RAPIDS_VERSION=${RAPIDS}
          SCCACHE_REGION=us-west-2
          SCCACHE_IDLE_TIMEOUT=32768
          SCCACHE_BUCKET=node-rapids-sccache
          SCCACHE_SERVER_PORT=$((4220 + $RANDOM % 5000))
          EOF

          echo -e "container .env:\n$(cat "${{ runner.temp }}/.env")"

          cat << EOF >> "${{ runner.temp }}/.env"
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EOF

      - name: Build
        if: env.dev_changed == 'true' || env.src_changed == 'true'
        shell: bash
        run: |
          if [[ ${dev_changed} == 'true' ]]; then
            DOCKER_BUILDKIT=1 \
            DOCKER_SCAN_SUGGEST=false \
            docker build --pull --force-rm \
              --build-arg UCX_VERSION="${{ env.UCX }}" \
              --build-arg NODE_VERSION="${{ env.NODE }}" \
              --build-arg LINUX_VERSION="${{ env.LINUX }}" \
              --build-arg AMD64_BASE="nvidia/cuda:${{ matrix.CUDA }}-devel-${{ matrix.LINUX }}" \
              --build-arg ARM64_BASE="nvidia/cuda:${{ matrix.CUDA }}-devel-${{ matrix.LINUX }}" \
              -f node/dev/dockerfiles/devel/main.Dockerfile -t ${MAIN_IMG} node
          fi
          docker run --rm -t ${RUN_ARGS} \
            -e "SSH_AUTH_SOCK=/ssh-agent" \
            -v "$SSH_AUTH_SOCK:/ssh-agent" \
            -v "$HOME/.ssh:/opt/rapids/.ssh" \
            -v "$HOME/.gitconfig:/opt/rapids/.gitconfig" \
            ${MAIN_IMG} bash -c 'set -ex; yarn --pure-lockfile --prefer-offline && yarn build;';
