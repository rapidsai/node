{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "compounds": [
        {
            "name": "Debug Demo (TS and C++)",
            "configurations": [
                "Debug Demo (launch gdb)",
                "Debug Demo (attach node)",
            ]
        }
    ],
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Debug Demo (TS only)",
            "program": "${workspaceFolder}/${input:DEMO_NAME}",
            "stopOnEntry": false,
            "args": ["${input:DEMO_ARGS}"],
            "runtimeArgs": ["--experimental-vm-modules"],
            "cwd": "${workspaceFolder}/${input:DEMO_NAME}",
            "console": "integratedTerminal",
            "internalConsoleOptions": "neverOpen",
            "skipFiles": [
                // "**/node_modules/**",
                // "<node_internals>/**",
                // "**/node_modules/esm/**",
                "**/node_modules/debug/**",
                "**/node_modules/mjolnir.js/**",
                "<node_internals>/internal/buffer",
                "<node_internals>/internal/fs/utils",
                // "<node_internals>/internal/validators",
            ],
            "env": {
                "NODE_NO_WARNINGS": "1",
                // "NODE_ENV": "development",
                "NODE_ENV": "production",
                // "READABLE_STREAM": "disable",
            }
        },
        {
            "name": "Debug Demo (launch gdb)",
            // hide the individual configurations from the debug dropdown list
            "presentation": { "hidden": true },
            "type": "cppdbg",
            "request": "launch",
            "stopAtEntry": false,
            "externalConsole": false,
            // "envFile": "${workspaceFolder}/.env",
            "cwd": "${workspaceFolder}/${input:DEMO_NAME}",
            "MIMode": "gdb",
            "miDebuggerPath": "/usr/bin/gdb",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ],
            "program": "${input:NODE_BINARY}",
            "environment": [
                { "name": "NODE_DEBUG", "value": "1" },
                { "name": "NODE_NO_WARNINGS", "value": "1" },
                { "name": "NODE_ENV", "value": "production" },
                // { "name": "READABLE_STREAM", "value": "disable" },
            ],
            "args": [
                "--inspect=9229",
                "--expose-internals",
                "--experimental-vm-modules",
                "${workspaceFolder}/${input:DEMO_NAME}",
                // "${input:DEMO_ARGS}"
            ],
        },
        {
            "name": "Debug Demo (attach node)",
            "type": "node",
            "request": "attach",
            // hide the individual configurations from the debug dropdown list
            "presentation": { "hidden": true },
            "port": 9229,
            "timeout": 60000,
            "cwd": "${workspaceFolder}",
            "skipFiles": [
                "<node_internals>/**",
                "${workspaceFolder}/node_modules/**"
            ],
        },
    ],
    "inputs": [
        {
            "type": "command",
            "id": "NODE_BINARY",
            "command": "shellCommand.execute",
            "args": {
                "description": "path to node",
                "command": "which node",
                "useFirstResult": true,
            }
        },
        {
            "id": "DEMO_ARGS",
            "type": "promptString",
            "description": "Supply additional arguments to the demo (optional)",
            "default": "",
        },
        {
            "type": "command",
            "id": "DEMO_NAME",
            "command": "shellCommand.execute",
            "args": {
                "description": "Select a demo to debug",
                "command": "echo client-server viz-app luma graph spatial xterm $(find modules/demo/deck modules/demo/tfjs modules/demo/ipc modules/demo/ssr modules/demo/sql -maxdepth 2 -type f -name 'package.json' -print0 | grep -z -v node_modules | tr -d '\\0' | sed -r 's@modules/demo/@@g' | sed -r 's@/package.json@ @g') | sort -Vr | sed -r 's@\\s@\\n@g'",
            }
        },
    ]
}
